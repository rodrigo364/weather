// Generated by Dagger (https://dagger.dev).
package br.com.weather.di;

import br.com.weather.data.network.service.RealtimeWeatherService;
import br.com.weather.domain.repository.RealTimeWeatherRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideRealTimeWeatherRepositoryFactory implements Factory<RealTimeWeatherRepository> {
  private final Provider<RealtimeWeatherService> apiProvider;

  public AppModule_ProvideRealTimeWeatherRepositoryFactory(
      Provider<RealtimeWeatherService> apiProvider) {
    this.apiProvider = apiProvider;
  }

  @Override
  public RealTimeWeatherRepository get() {
    return provideRealTimeWeatherRepository(apiProvider.get());
  }

  public static AppModule_ProvideRealTimeWeatherRepositoryFactory create(
      Provider<RealtimeWeatherService> apiProvider) {
    return new AppModule_ProvideRealTimeWeatherRepositoryFactory(apiProvider);
  }

  public static RealTimeWeatherRepository provideRealTimeWeatherRepository(
      RealtimeWeatherService api) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideRealTimeWeatherRepository(api));
  }
}
