// Generated by Dagger (https://dagger.dev).
package br.com.weather.di;

import br.com.weather.data.network.service.RealtimeWeatherService;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.converter.gson.GsonConverterFactory;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvidesRealtimeWeatherServiceFactory implements Factory<RealtimeWeatherService> {
  private final Provider<OkHttpClient> okHttpClientProvider;

  private final Provider<GsonConverterFactory> gsonConverterFactoryProvider;

  public AppModule_ProvidesRealtimeWeatherServiceFactory(
      Provider<OkHttpClient> okHttpClientProvider,
      Provider<GsonConverterFactory> gsonConverterFactoryProvider) {
    this.okHttpClientProvider = okHttpClientProvider;
    this.gsonConverterFactoryProvider = gsonConverterFactoryProvider;
  }

  @Override
  public RealtimeWeatherService get() {
    return providesRealtimeWeatherService(okHttpClientProvider.get(), gsonConverterFactoryProvider.get());
  }

  public static AppModule_ProvidesRealtimeWeatherServiceFactory create(
      Provider<OkHttpClient> okHttpClientProvider,
      Provider<GsonConverterFactory> gsonConverterFactoryProvider) {
    return new AppModule_ProvidesRealtimeWeatherServiceFactory(okHttpClientProvider, gsonConverterFactoryProvider);
  }

  public static RealtimeWeatherService providesRealtimeWeatherService(OkHttpClient okHttpClient,
      GsonConverterFactory gsonConverterFactory) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.providesRealtimeWeatherService(okHttpClient, gsonConverterFactory));
  }
}
