// Generated by Dagger (https://dagger.dev).
package br.com.weather.domain.usecases.realtimeweather;

import br.com.weather.domain.repository.RealTimeWeatherRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class GetCurrentRealTimeWeatherUseCase_Factory implements Factory<GetCurrentRealTimeWeatherUseCase> {
  private final Provider<RealTimeWeatherRepository> repositoryProvider;

  public GetCurrentRealTimeWeatherUseCase_Factory(
      Provider<RealTimeWeatherRepository> repositoryProvider) {
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public GetCurrentRealTimeWeatherUseCase get() {
    return newInstance(repositoryProvider.get());
  }

  public static GetCurrentRealTimeWeatherUseCase_Factory create(
      Provider<RealTimeWeatherRepository> repositoryProvider) {
    return new GetCurrentRealTimeWeatherUseCase_Factory(repositoryProvider);
  }

  public static GetCurrentRealTimeWeatherUseCase newInstance(RealTimeWeatherRepository repository) {
    return new GetCurrentRealTimeWeatherUseCase(repository);
  }
}
